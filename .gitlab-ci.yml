variables:
  IMAGE_NODE: node:18.18-alpine
  IMAGE_DOCKER: docker:20.10
  DOCKER_IN_DOCKER_SERVICE: docker:20.10-dind
  WEB_DIR: "web"

workflow:
  rules:
    # main branch = production
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      variables:
        PACKAGE_NAME: "web-dist"
        ENVIRONMENT: production
        NODEJSAPP_URL: http://147.228.173.196

    # any other branch = development
    - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH
      variables:
        PACKAGE_NAME: "web-dist-dev"
        ENVIRONMENT: development
        NODEJSAPP_URL: http://147.228.173.197

default:
  image: alpine:3.17
  tags:
  - kiv

stages:
  - test
  - build
  - deploy

test-unit-web:
  stage: test
  image: $IMAGE_NODE
  script:
    - cd $WEB_DIR
    - npm install
    - npm run test

build-docker-image:
  stage: build
  image: $IMAGE_DOCKER
  services:
    - $DOCKER_IN_DOCKER_SERVICE
  script:
    - ./scripts/build-publish-docker.sh $PACKAGE_NAME

deploy-nodejsapp:
  stage: deploy
  before_script:
    - which ssh-agent || ( apk --update add openssh-client )
    - eval $(ssh-agent -s)
    - chmod 0400 $SSH_PRIVATE_KEY
    - ssh-add $SSH_PRIVATE_KEY
    - mkdir -p ~/.ssh
    - chmod 0700 ~/.ssh
    - cp $SSH_SERVER_HOSTKEYS ~/.ssh/known_hosts
    - chmod 0644 ~/.ssh/known_hosts
    - apk --no-cache add tar unzip
  script:
    - echo "Deploying to ${ENVIRONMENT}"
    - echo "App running at $NODEJSAPP_URL"
    - "ansible-playbook -i inventories/${ENVIRONMENT:-development}/hosts webservers.yml"
  environment:
    name: ${ENVIRONMENT}
    url: $NODEJSAPP_URL
  when: manual
